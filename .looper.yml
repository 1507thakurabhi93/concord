envs:
  global:
    variables:
      MVN_SETTINGS: .looper/settings.xml
      DEPLOYMENT_USERNAME: "%{credentials.username('walmart-deployment')}"
      DEPLOYMENT_PASSWORD: "%{credentials.password('walmart-deployment')}"

      SERVER_IMAGE_TAG: "${dockerTagPrefix}walmartlabs/concord-server"
      CONSOLE_IMAGE_TAG: "${dockerTagPrefix}walmartlabs/concord-console"
      AGENT_IMAGE_TAG: "${dockerTagPrefix}walmartlabs/concord-agent"

triggers:
  - manual:
      name: "Run Build"
      call: default
  - manual:
      name: "Perform a release"
      call: release
  - manual:
      name: "Deploy Maven site"
      call: siteDeploy

branches:
- spec: "master"
- spec: "bugfix/*"
  call: bugfix

tools:
  maven: 3.5.2
  sonarscanner: 3.0.3.778

docker:
- name: "looper-agent"
  image: "docker.prod.walmart.com/devtools/looper-agent-docker:0.1.0-centos"

flows:
  buildImages:
  - dockerImage:
      baseDir: "docker-images/server"
      dockerfile: "walmart/Dockerfile"
      tags:
      - "${SERVER_IMAGE_TAG}:${concord_version}"
      - "${SERVER_IMAGE_TAG}:latest"
      buildArgs:
        concord_version: ${concord_version}
      push: true
  - dockerImage:
      baseDir: "docker-images/console"
      dockerfile: "walmart/Dockerfile"
      tags:
      - "${CONSOLE_IMAGE_TAG}:${concord_version}"
      - "${CONSOLE_IMAGE_TAG}:latest"
      buildArgs:
        concord_version: ${concord_version}
      push: true
  - dockerImage:
      baseDir: "docker-images/agent"
      dockerfile: "walmart/Dockerfile"
      tags:
      - "${AGENT_IMAGE_TAG}:${concord_version}"
      - "${AGENT_IMAGE_TAG}:latest"
      buildArgs:
        concord_version: ${concord_version}
      push: true

  buildImagesNoLatest:
  - dockerImage:
      baseDir: "docker-images/server"
      dockerfile: "walmart/Dockerfile"
      tags:
      - "${SERVER_IMAGE_TAG}:${concord_version}"
      buildArgs:
        concord_version: ${concord_version}
      push: true
  - dockerImage:
      baseDir: "docker-images/console"
      dockerfile: "walmart/Dockerfile"
      tags:
      - "${CONSOLE_IMAGE_TAG}:${concord_version}"
      buildArgs:
        concord_version: ${concord_version}
      push: true
  - dockerImage:
      baseDir: "docker-images/agent"
      dockerfile: "walmart/Dockerfile"
      tags:
      - "${AGENT_IMAGE_TAG}:${concord_version}"
      buildArgs:
        concord_version: ${concord_version}
      push: true

  build:
  - node(docker-daemon):
    - dockguardAgent(looper-agent):
      - docker network create testnet$DOCKGUARD_STEP_UID
      - docker network connect testnet$DOCKGUARD_STEP_UID $BUILD_CONTAINER_NAME
      - docker run -d --network testnet$DOCKGUARD_STEP_UID --name db$DOCKGUARD_STEP_UID ${dbDockerImage}
      - (name build) mvn -U -B -s $MVN_SETTINGS clean deploy -DskipTests -Ddb.container.name=db$DOCKGUARD_STEP_UID
      - call: runsonar
      - hygieia.publishBuild()
      - ws_snapshot: binaries
        includes: docker-images/**
    - ws_restore: binaries
    - call: buildImagesNoLatest

  release:
  - node(docker-daemon):
    - exposeVars(maven)
    - dockguardAgent(looper-agent):
      - docker network create testnet$DOCKGUARD_STEP_UID
      - docker network connect testnet$DOCKGUARD_STEP_UID $BUILD_CONTAINER_NAME
      - docker run -d --network testnet$DOCKGUARD_STEP_UID --name db$DOCKGUARD_STEP_UID ${dbDockerImage}
      - (name build) mvn -U -B -s $MVN_SETTINGS release:prepare release:perform -DskipTests -Ddb.container.name=db$DOCKGUARD_STEP_UID
      - hygieia.publishBuild()
      - ws_snapshot: binaries
        includes: docker-images/**
    - ws_restore: binaries
    - var(RELEASE_VERSION = '%{MAVEN_VERSION.replace("-SNAPSHOT", "")}')
    - call: buildImages(concord_version = ${RELEASE_VERSION})

  default:
  - call: build(concord_version = latest-master-looper)

  bugfix:
  - call: build(concord_version = latest-bugfix-looper)

  pr:
  - call: build(concord_version = latest-pr-looper)

  runsonar:
  - sonar("Sonar"):
    - (name sonar) mvn -B -fae -s $MVN_SETTINGS $SONAR_MAVEN_GOAL
    - hygieia.publishSonar()

  siteDeploy:
  - exposeVars(maven):
      vars:
        siteurl: 'project/distributionManagement/site/url'
  - (Maven site deploy) mvn -B clean site-deploy -P walmart
  - echo "Site successfully deployed to ${siteurl}"
