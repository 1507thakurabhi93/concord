envs:
  global:
    variables:
      MVN_SETTINGS: .looper/settings.xml
      DEPLOYMENT_USERNAME: "%{credentials.username('walmart-deployment')}"
      DEPLOYMENT_PASSWORD: "%{credentials.password('walmart-deployment')}"

      SERVER_IMAGE_TAG: "docker.prod.walmart.com/walmartlabs/concord-server"
      CONSOLE_IMAGE_TAG: "docker.prod.walmart.com/walmartlabs/concord-console"
      AGENT_IMAGE_TAG: "docker.prod.walmart.com/walmartlabs/concord-agent"

triggers:
  - manual:
      name: "Build master"
      call: default
  - manual:
      name: "Perform a release"
      call: release
  - manual:
      name: "Deploy Maven site"
      call: siteDeploy

tools:
  maven: 3.5.2
  sonarscanner: 3.0.3.778

docker:
- name: 'looper-agent'
  image: 'docker.prod.walmart.com/devtools/looper-agent-docker:0.1.0-centos'
  hostname: 'localhost'
  port: 5432

flows:
  buildImages:
  - call: buildImagesNoLatest

  # tag new images with latest
  - docker tag "${SERVER_IMAGE_TAG}:${concord_version}" "${SERVER_IMAGE_TAG}:latest"
  - docker tag "${AGENT_IMAGE_TAG}:${concord_version}" "${AGENT_IMAGE_TAG}:latest"
  - docker tag "${CONSOLE_IMAGE_TAG}:${concord_version}" "${CONSOLE_IMAGE_TAG}:latest"

  # push the latest
  - docker push "${SERVER_IMAGE_TAG}:latest"
  - docker push "${AGENT_IMAGE_TAG}:latest"
  - docker push "${CONSOLE_IMAGE_TAG}:latest"

  buildImagesNoLatest:
  # pull the latest images in order to cache as much as possible
  - docker pull "${SERVER_IMAGE_TAG}:latest"
  - docker pull "${AGENT_IMAGE_TAG}:latest"
  - docker pull "${CONSOLE_IMAGE_TAG}:latest"

  # build new images
  - cd docker-images/server && docker build -t "${SERVER_IMAGE_TAG}:${concord_version}" -f walmart/Dockerfile --build-arg "concord_version=${concord_version}" .
  - cd docker-images/agent && docker build -t "${AGENT_IMAGE_TAG}:${concord_version}" -f walmart/Dockerfile --build-arg "concord_version=${concord_version}" .
  - cd docker-images/console && docker build -t "${CONSOLE_IMAGE_TAG}:${concord_version}" -f walmart/Dockerfile --build-arg "concord_version=${concord_version}" .

  # push the images
  - docker push ${SERVER_IMAGE_TAG}:${concord_version}
  - docker push "${AGENT_IMAGE_TAG}:${concord_version}"
  - docker push "${CONSOLE_IMAGE_TAG}:${concord_version}"

  build:
  - node(docker-daemon):
    - dockguardAgent(looper-agent):
      - docker network create testnet$DOCKGUARD_STEP_UID
      - docker network connect testnet$DOCKGUARD_STEP_UID $BUILD_CONTAINER_NAME
      - (name build) mvn -U -B -s $MVN_SETTINGS clean deploy -DskipTests
      - call: runsonar
      - hygieia.publishBuild()
      - call: buildImagesNoLatest

  runsonar:
  - sonar("Sonar"):
    - (name sonar) mvn -B -fae -s $MVN_SETTINGS $SONAR_MAVEN_GOAL
    - hygieia.publishSonar()

  cleanup:
  - (name cleanup) docker rm -f $(docker ps -aq) &> /dev/null || true

  default:
  - call: build(concord_version = latest-master-looper)

  pr:
  - call: build(concord_version = latest-pr-looper)

  release:
  - node(docker-daemon):
    - exposeVars(maven)
    - dockguardAgent(looper-agent):
      - docker network create testnet$DOCKGUARD_STEP_UID
      - docker network connect testnet$DOCKGUARD_STEP_UID $BUILD_CONTAINER_NAME
      - (name build) mvn -U -B -s $MVN_SETTINGS release:prepare release:perform -DskipTests
      - var(RELEASE_VERSION = '%{MAVEN_VERSION.replace("-SNAPSHOT", "")}')
      - call: buildImages(concord_version = ${RELEASE_VERSION})

  siteDeploy:
  - exposeVars(maven):
      vars:
        siteurl: 'project/distributionManagement/site/url'
  - (Maven site deploy) mvn -B clean site-deploy -P walmart
  - echo "Site successfully deployed to ${siteurl}"
